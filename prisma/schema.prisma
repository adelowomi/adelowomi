// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id            String         @id @default(cuid())
  title         String
  description   String?        @db.Text
  date          DateTime
  time          String
  venue         String
  capacity      Int
  flyerUrl      String?
  flyerFileId   String?        // Google Drive file ID for uploaded flyer
  flyerFileName String?        // Original filename of uploaded flyer
  status        EventStatus    @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  registrations Registration[]
  galleries     Gallery[]
  videos        Video[]
  volunteerForms VolunteerForm[]
}

model Registration {
  id              String           @id @default(cuid())
  eventId         String
  firstName       String
  lastName        String
  email           String
  phone           String
  status          StudentStatus
  course          String?
  areaOfInterest  String
  expectations    String?         @db.Text
  registeredAt    DateTime        @default(now())
  attended        Boolean         @default(false)
  attendedAt      DateTime?
  event           Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, email])
}

model Gallery {
  id          String   @id @default(cuid())
  eventId     String?
  title       String
  driveFileId String
  driveUrl    String
  thumbnailUrl String?
  createdAt   DateTime @default(now())
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)
}

model Video {
  id          String      @id @default(cuid())
  eventId     String?
  title       String
  description String?     @db.Text
  driveFileId String
  driveUrl    String
  thumbnailUrl String?
  category    VideoCategory @default(EVENT)
  createdAt   DateTime    @default(now())
  event       Event?      @relation(fields: [eventId], references: [id], onDelete: SetNull)
}

enum Role {
  ADMIN
}

enum EventStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum StudentStatus {
  STUDENT
  GRADUATE
}

enum VideoCategory {
  EVENT
  CONTENT
  PROMOTIONAL
}

model VolunteerForm {
  id          String   @id @default(cuid())
  eventId     String
  title       String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  questions   VolunteerFormQuestion[]
  submissions VolunteerSubmission[]
}

model VolunteerFormQuestion {
  id             String            @id @default(cuid())
  volunteerFormId String
  question       String
  type           QuestionType
  required       Boolean           @default(false)
  options        String?           @db.Text // JSON array for multiple choice questions
  order          Int
  createdAt      DateTime          @default(now())
  volunteerForm  VolunteerForm     @relation(fields: [volunteerFormId], references: [id], onDelete: Cascade)
  answers        VolunteerAnswer[]
}

model VolunteerSubmission {
  id             String            @id @default(cuid())
  volunteerFormId String
  firstName      String
  lastName       String
  email          String
  phone          String?
  submittedAt    DateTime          @default(now())
  volunteerForm  VolunteerForm     @relation(fields: [volunteerFormId], references: [id], onDelete: Cascade)
  answers        VolunteerAnswer[]

  @@unique([volunteerFormId, email])
}

model VolunteerAnswer {
  id                   String               @id @default(cuid())
  submissionId         String
  questionId           String
  answer               String               @db.Text
  createdAt            DateTime             @default(now())
  submission           VolunteerSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question             VolunteerFormQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, questionId])
}

enum QuestionType {
  TEXT
  TEXTAREA
  EMAIL
  PHONE
  MULTIPLE_CHOICE
  CHECKBOX
  DATE
  TIME
}
